{"ast":null,"code":"var _jsxFileName = \"/Users/samo/Documents/VSVU/Fragmenty/fragmenty-web/src/Navigation.js\";\nimport React, { Component } from 'react';\nimport './navigation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet activeId = 38;\nlet activeCategory = 0;\nlet category1 = [1, 17, 18, 22, 34, 38, 49, 55, 58, 61, 72]; // Circle\n\nconst FragmentCircle = props => {\n  let circleClass = 'circle circle-unknown'; //navigation.css\n\n  if (props.active) {\n    circleClass = 'circle circle-active';\n  } else if (props.discovered) {\n    circleClass = 'circle circle-discovered';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: circleClass,\n    id: props.key,\n    onClick: props.handleClick\n  }, props.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}; // Deault matrix\n\n\n_c = FragmentCircle;\n\nconst buildMatrixState = (rowCount, rowLength) => {\n  const totalCircles = rowCount * rowLength;\n  const matrixState = {}; // Calculate details for each circle\n\n  for (let key = 1; key <= totalCircles; key++) {\n    const circleDetails = {\n      active: false,\n      discovered: false,\n      highlighted: false\n    };\n    matrixState[key] = circleDetails;\n  }\n\n  matrixState[activeId].active = true;\n  return matrixState;\n}; // Class\n\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props);\n    const initialRowCount = 15;\n    const initialRowLength = 5;\n    this.state = {\n      rowCount: initialRowCount,\n      rowLength: initialRowLength,\n      matrix: buildMatrixState(initialRowCount, initialRowLength)\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    const matrix = this.state.matrix;\n    const id = e.target.id;\n    matrix[id].active = true;\n    matrix[activeId].active = false;\n    matrix[activeId].discovered = true;\n    this.setState({\n      matrix\n    });\n    activeId = id;\n    this.props.handleIdChange(id);\n  }\n\n  categorySelect(index) {\n    let matrix = this.state.matrix;\n\n    if (index === 0) {\n      for (let key = 1; key <= 75; key++) {\n        matrix[key].highlighted = false;\n      }\n    } else if (index === 1) {\n      for (let key = 0; key <= category1.length; key++) {\n        matrix[category1[key]].highlighted = true;\n      }\n    }\n  }\n\n  rowBuilder(rowCount, rowLength, rows = []) {\n    if (rowCount > 0) {\n      const circleKey = rowCount * rowLength;\n      rows.push(this.circleBuilder(circleKey, rowCount, rowLength));\n      return this.rowBuilder(rowCount - 1, rowLength, rows);\n    }\n\n    this.categorySelect(1);\n    return rows;\n  }\n\n  circleBuilder(circleKey, rowCount, rowLength, row = []) {\n    if (rowLength > 0) {\n      const circle = this.state.matrix[circleKey];\n      row.push(FragmentCircle({\n        key: circleKey,\n        active: circle.active,\n        discovered: circle.discovered,\n        handleClick: this.handleClick\n      }));\n      return this.circleBuilder(circleKey - 1, rowCount, rowLength - 1, row);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: row\n    }, 'row-' + rowCount, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation\",\n      children: this.rowBuilder(this.state.rowCount, this.state.rowLength)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Navigation;\n\nvar _c;\n\n$RefreshReg$(_c, \"FragmentCircle\");","map":{"version":3,"sources":["/Users/samo/Documents/VSVU/Fragmenty/fragmenty-web/src/Navigation.js"],"names":["React","Component","activeId","activeCategory","category1","FragmentCircle","props","circleClass","active","discovered","key","handleClick","buildMatrixState","rowCount","rowLength","totalCircles","matrixState","circleDetails","highlighted","Navigation","constructor","initialRowCount","initialRowLength","state","matrix","bind","e","id","target","setState","handleIdChange","categorySelect","index","length","rowBuilder","rows","circleKey","push","circleBuilder","row","circle","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './navigation.css';\n\nlet activeId = 38;\nlet activeCategory = 0;\n\nlet category1 = [1,17,18,22,34,38,49,55,58,61,72];\n\n\n\n// Circle\n\nconst FragmentCircle = props => {\n  let circleClass = 'circle circle-unknown'; //navigation.css\n\n  if (props.active) {\n    circleClass = 'circle circle-active';\n  } else if (props.discovered) {\n    circleClass = 'circle circle-discovered';\n  }\n\n  return (\n    <div\n      className={circleClass}\n      id={props.key}\n      key={props.key}\n      onClick={props.handleClick}\n    />\n  )\n}\n\n// Deault matrix\n\nconst buildMatrixState = (rowCount, rowLength) => {\n  const totalCircles = rowCount * rowLength;\n  const matrixState = {};\n\n  // Calculate details for each circle\n  for (let key = 1; key <= totalCircles; key++) {\n    const circleDetails = {\n      active: false,\n      discovered: false,\n      highlighted: false\n    };\n\n    matrixState[key] = circleDetails;\n  }\n  matrixState[activeId].active = true;\n\n  return matrixState;\n}\n\n// Class\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props)\n    const initialRowCount = 15;\n    const initialRowLength = 5;\n\n    this.state = {\n      rowCount: initialRowCount,\n      rowLength: initialRowLength,\n      matrix: buildMatrixState(initialRowCount, initialRowLength)\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    const matrix = this.state.matrix;\n    const id = e.target.id;\n\n    matrix[id].active = true;\n    matrix[activeId].active = false;\n    matrix[activeId].discovered = true;\n\n    this.setState({ matrix });\n    activeId = id;\n    this.props.handleIdChange(id);\n  }\n\n  categorySelect(index) {\n    let matrix = this.state.matrix;\n    if (index === 0) {\n      for (let key = 1; key <= 75; key++) {\n        matrix[key].highlighted = false;\n      }\n    } else if (index === 1) {\n      for (let key = 0; key <= category1.length; key++) {\n        matrix[category1[key]].highlighted = true;\n      }\n    }\n  }\n\n  rowBuilder(rowCount, rowLength, rows = []) {\n    if (rowCount > 0) {\n      const circleKey = rowCount * rowLength;\n      rows.push(this.circleBuilder(circleKey, rowCount, rowLength));\n\n      return this.rowBuilder(rowCount - 1, rowLength, rows);\n    }\n    this.categorySelect(1);\n    return rows\n  }\n\n  circleBuilder(circleKey, rowCount, rowLength, row = []) {\n    if (rowLength > 0) {\n      const circle = this.state.matrix[circleKey];\n\n      row.push(FragmentCircle({\n        key: circleKey,\n        active: circle.active,\n        discovered: circle.discovered,\n        handleClick: this.handleClick,\n      }));\n\n      return this.circleBuilder(circleKey - 1, rowCount, rowLength - 1, row);\n    }\n    return (<div key={'row-' + rowCount}>{row}</div>);\n  }\n\n  render() {\n    return (\n      <div className=\"navigation\">\n        {this.rowBuilder(this.state.rowCount, this.state.rowLength)}\n      </div>\n    )\n  }\n}\n\nexport default Navigation;"]},"metadata":{},"sourceType":"module"}