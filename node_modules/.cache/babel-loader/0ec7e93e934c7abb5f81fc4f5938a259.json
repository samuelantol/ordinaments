{"ast":null,"code":"var _jsxFileName = \"/Users/samo/Documents/VSVU/Fragmenty/fragmenty-web/src/Navigation.js\";\nimport React, { Component } from 'react';\nimport './navigation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet activeId = 38;\nlet activeCategory = 0; // Categories\n\nconst Categories = props => {\n  return /*#__PURE__*/_jsxDEV(Button, {\n    value: \"Industrial\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}; // Circle\n\n\n_c = Categories;\n\nconst FragmentCircle = props => {\n  let circleClass = 'circle circle-unknown'; //navigation.css\n\n  if (props.active) {\n    circleClass = 'circle circle-active';\n  } else if (props.discovered) {\n    circleClass = 'circle circle-discovered';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: circleClass,\n    id: props.key,\n    onClick: props.handleClick\n  }, props.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}; // Deault matrix\n\n\n_c2 = FragmentCircle;\n\nconst buildMatrixState = (rowCount, rowLength) => {\n  const totalCircles = rowCount * rowLength;\n  const matrixState = {}; // Calculate details for each circle\n\n  for (let key = 1; key <= totalCircles; key++) {\n    const circleDetails = {\n      active: false,\n      discovered: false,\n      highlighted: false\n    };\n    matrixState[key] = circleDetails;\n  }\n\n  matrixState[activeId].active = true;\n  return matrixState;\n}; // Class\n\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props);\n    const initialRowCount = 15;\n    const initialRowLength = 5;\n    this.state = {\n      rowCount: initialRowCount,\n      rowLength: initialRowLength,\n      matrix: buildMatrixState(initialRowCount, initialRowLength)\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    const matrix = this.state.matrix;\n    const id = e.target.id;\n    matrix[id].active = true;\n    matrix[activeId].active = false;\n    matrix[activeId].discovered = true;\n    this.setState({\n      matrix\n    });\n    activeId = id;\n    this.props.handleIdChange(id);\n  }\n\n  rowBuilder(rowCount, rowLength, rows = []) {\n    if (rowCount > 0) {\n      const circleKey = rowCount * rowLength;\n      rows.push(this.circleBuilder(circleKey, rowCount, rowLength));\n      return this.rowBuilder(rowCount - 1, rowLength, rows);\n    }\n\n    return rows;\n  }\n\n  circleBuilder(circleKey, rowCount, rowLength, row = []) {\n    if (rowLength > 0) {\n      const circle = this.state.matrix[circleKey];\n      row.push(FragmentCircle({\n        key: circleKey,\n        active: circle.active,\n        discovered: circle.discovered,\n        handleClick: this.handleClick\n      }));\n      return this.circleBuilder(circleKey - 1, rowCount, rowLength - 1, row);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: row\n    }, 'row-' + rowCount, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation\",\n      children: this.rowBuilder(this.state.rowCount, this.state.rowLength)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Navigation;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Categories\");\n$RefreshReg$(_c2, \"FragmentCircle\");","map":{"version":3,"sources":["/Users/samo/Documents/VSVU/Fragmenty/fragmenty-web/src/Navigation.js"],"names":["React","Component","activeId","activeCategory","Categories","props","FragmentCircle","circleClass","active","discovered","key","handleClick","buildMatrixState","rowCount","rowLength","totalCircles","matrixState","circleDetails","highlighted","Navigation","constructor","initialRowCount","initialRowLength","state","matrix","bind","e","id","target","setState","handleIdChange","rowBuilder","rows","circleKey","push","circleBuilder","row","circle","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;;AAEA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,cAAc,GAAG,CAArB,C,CAEA;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B,sBACE,QAAC,MAAD;AACE,IAAA,KAAK,EAAC;AADR;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND,C,CAQA;;;KARMD,U;;AAUN,MAAME,cAAc,GAAGD,KAAK,IAAI;AAC9B,MAAIE,WAAW,GAAG,uBAAlB,CAD8B,CACY;;AAE1C,MAAIF,KAAK,CAACG,MAAV,EAAkB;AAChBD,IAAAA,WAAW,GAAG,sBAAd;AACD,GAFD,MAEO,IAAIF,KAAK,CAACI,UAAV,EAAsB;AAC3BF,IAAAA,WAAW,GAAG,0BAAd;AACD;;AAED,sBACE;AACE,IAAA,SAAS,EAAEA,WADb;AAEE,IAAA,EAAE,EAAEF,KAAK,CAACK,GAFZ;AAIE,IAAA,OAAO,EAAEL,KAAK,CAACM;AAJjB,KAGON,KAAK,CAACK,GAHb;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAjBD,C,CAmBA;;;MAnBMJ,c;;AAqBN,MAAMM,gBAAgB,GAAG,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAChD,QAAMC,YAAY,GAAGF,QAAQ,GAAGC,SAAhC;AACA,QAAME,WAAW,GAAG,EAApB,CAFgD,CAGhD;;AACA,OAAK,IAAIN,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAIK,YAAzB,EAAuCL,GAAG,EAA1C,EAA8C;AAC5C,UAAMO,aAAa,GAAG;AACpBT,MAAAA,MAAM,EAAE,KADY;AAEpBC,MAAAA,UAAU,EAAE,KAFQ;AAGpBS,MAAAA,WAAW,EAAE;AAHO,KAAtB;AAKAF,IAAAA,WAAW,CAACN,GAAD,CAAX,GAAmBO,aAAnB;AACD;;AACDD,EAAAA,WAAW,CAACd,QAAD,CAAX,CAAsBM,MAAtB,GAA+B,IAA/B;AACA,SAAOQ,WAAP;AACD,CAdD,C,CAgBA;;;AAEA,MAAMG,UAAN,SAAyBlB,SAAzB,CAAmC;AACjCmB,EAAAA,WAAW,CAACf,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,UAAMgB,eAAe,GAAG,EAAxB;AACA,UAAMC,gBAAgB,GAAG,CAAzB;AACA,SAAKC,KAAL,GAAa;AACXV,MAAAA,QAAQ,EAAEQ,eADC;AAEXP,MAAAA,SAAS,EAAEQ,gBAFA;AAGXE,MAAAA,MAAM,EAAEZ,gBAAgB,CAACS,eAAD,EAAkBC,gBAAlB;AAHb,KAAb;AAKA,SAAKX,WAAL,GAAmB,KAAKA,WAAL,CAAiBc,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDd,EAAAA,WAAW,CAACe,CAAD,EAAI;AACb,UAAMF,MAAM,GAAG,KAAKD,KAAL,CAAWC,MAA1B;AACA,UAAMG,EAAE,GAAGD,CAAC,CAACE,MAAF,CAASD,EAApB;AACAH,IAAAA,MAAM,CAACG,EAAD,CAAN,CAAWnB,MAAX,GAAoB,IAApB;AACAgB,IAAAA,MAAM,CAACtB,QAAD,CAAN,CAAiBM,MAAjB,GAA0B,KAA1B;AACAgB,IAAAA,MAAM,CAACtB,QAAD,CAAN,CAAiBO,UAAjB,GAA8B,IAA9B;AACA,SAAKoB,QAAL,CAAc;AAAEL,MAAAA;AAAF,KAAd;AACAtB,IAAAA,QAAQ,GAAGyB,EAAX;AACA,SAAKtB,KAAL,CAAWyB,cAAX,CAA0BH,EAA1B;AACD;;AAEDI,EAAAA,UAAU,CAAClB,QAAD,EAAWC,SAAX,EAAsBkB,IAAI,GAAG,EAA7B,EAAiC;AACzC,QAAInB,QAAQ,GAAG,CAAf,EAAkB;AAChB,YAAMoB,SAAS,GAAGpB,QAAQ,GAAGC,SAA7B;AACAkB,MAAAA,IAAI,CAACE,IAAL,CAAU,KAAKC,aAAL,CAAmBF,SAAnB,EAA8BpB,QAA9B,EAAwCC,SAAxC,CAAV;AACA,aAAO,KAAKiB,UAAL,CAAgBlB,QAAQ,GAAG,CAA3B,EAA8BC,SAA9B,EAAyCkB,IAAzC,CAAP;AACD;;AACD,WAAOA,IAAP;AACD;;AAEDG,EAAAA,aAAa,CAACF,SAAD,EAAYpB,QAAZ,EAAsBC,SAAtB,EAAiCsB,GAAG,GAAG,EAAvC,EAA2C;AACtD,QAAItB,SAAS,GAAG,CAAhB,EAAmB;AACjB,YAAMuB,MAAM,GAAG,KAAKd,KAAL,CAAWC,MAAX,CAAkBS,SAAlB,CAAf;AACAG,MAAAA,GAAG,CAACF,IAAJ,CAAS5B,cAAc,CAAC;AACtBI,QAAAA,GAAG,EAAEuB,SADiB;AAEtBzB,QAAAA,MAAM,EAAE6B,MAAM,CAAC7B,MAFO;AAGtBC,QAAAA,UAAU,EAAE4B,MAAM,CAAC5B,UAHG;AAItBE,QAAAA,WAAW,EAAE,KAAKA;AAJI,OAAD,CAAvB;AAMA,aAAO,KAAKwB,aAAL,CAAmBF,SAAS,GAAG,CAA/B,EAAkCpB,QAAlC,EAA4CC,SAAS,GAAG,CAAxD,EAA2DsB,GAA3D,CAAP;AACD;;AACD,wBAAQ;AAAA,gBAA8BA;AAA9B,OAAU,SAASvB,QAAnB;AAAA;AAAA;AAAA;AAAA,YAAR;AACD;;AAEDyB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBACG,KAAKP,UAAL,CAAgB,KAAKR,KAAL,CAAWV,QAA3B,EAAqC,KAAKU,KAAL,CAAWT,SAAhD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AArDgC;;AAwDnC,eAAeK,UAAf","sourcesContent":["import React, { Component } from 'react'\nimport './navigation.css';\n\nlet activeId = 38;\nlet activeCategory = 0;\n\n// Categories\n\nconst Categories = props => {\n  return (\n    <Button\n      value=\"Industrial\" \n    />\n  )\n}\n\n// Circle\n\nconst FragmentCircle = props => {\n  let circleClass = 'circle circle-unknown' //navigation.css\n\n  if (props.active) {\n    circleClass = 'circle circle-active'\n  } else if (props.discovered) {\n    circleClass = 'circle circle-discovered'\n  }\n\n  return (\n    <div\n      className={circleClass}\n      id={props.key}\n      key={props.key}\n      onClick={props.handleClick}\n    />\n  )\n}\n\n// Deault matrix\n\nconst buildMatrixState = (rowCount, rowLength) => {\n  const totalCircles = rowCount * rowLength\n  const matrixState = {}\n  // Calculate details for each circle\n  for (let key = 1; key <= totalCircles; key++) {\n    const circleDetails = {\n      active: false,\n      discovered: false,\n      highlighted: false\n    }\n    matrixState[key] = circleDetails\n  }\n  matrixState[activeId].active = true;\n  return matrixState\n}\n\n// Class\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props)\n    const initialRowCount = 15\n    const initialRowLength = 5\n    this.state = {\n      rowCount: initialRowCount,\n      rowLength: initialRowLength,\n      matrix: buildMatrixState(initialRowCount, initialRowLength)\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick(e) {\n    const matrix = this.state.matrix\n    const id = e.target.id\n    matrix[id].active = true;\n    matrix[activeId].active = false;\n    matrix[activeId].discovered = true;\n    this.setState({ matrix })\n    activeId = id\n    this.props.handleIdChange(id)\n  }\n\n  rowBuilder(rowCount, rowLength, rows = []) {\n    if (rowCount > 0) {\n      const circleKey = rowCount * rowLength\n      rows.push(this.circleBuilder(circleKey, rowCount, rowLength))\n      return this.rowBuilder(rowCount - 1, rowLength, rows)\n    }\n    return rows\n  }\n\n  circleBuilder(circleKey, rowCount, rowLength, row = []) {\n    if (rowLength > 0) {\n      const circle = this.state.matrix[circleKey]\n      row.push(FragmentCircle({\n        key: circleKey,\n        active: circle.active,\n        discovered: circle.discovered,\n        handleClick: this.handleClick,\n      }))\n      return this.circleBuilder(circleKey - 1, rowCount, rowLength - 1, row)\n    }\n    return (<div key={'row-' + rowCount}>{row}</div>)\n  }\n\n  render() {\n    return (\n      <div className=\"navigation\">\n        {this.rowBuilder(this.state.rowCount, this.state.rowLength)}\n      </div>\n    )\n  }\n}\n\nexport default Navigation;"]},"metadata":{},"sourceType":"module"}